// https://leetcode.com/problems/shortest-common-supersequence/

// length can be found by s1+s2- length of longest common subsequence

class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        
        int m = str1.size(),i,j,x;
        int n = str2.size();
        int dp[m+1][n+1];
        dp[m][n]=0;
        
        i=m; x=n ;
        for(j=0;j<n;j++)
        {
            dp[i][j]=x--;
        }
        j=n; x=m;
        for(i=0;i<m;i++){
            dp[i][j]=x--;
        }
        
        for(i=m-1;i>=0;i--){
            for(j=n-1;j>=0;j--){
                if(str1[i]==str2[j]){
                    dp[i][j]=1+dp[i+1][j+1];
                }
                else{
                    dp[i][j]= 1+ min(dp[i][j+1],dp[i+1][j]);
                }
            }
        }
        
//          for(i=0;i<=m;i++){
//              for(j=0;j<=n;j++)
//                  cout<<dp[i][j]<<" ";
//              cout<<endl;
//          }
        
        
        i=0;j=0;
        string ans="";
        while(i<m && j<n){
            if(str1[i] == str2[j]){
                 ans= ans+str1[i];
                i++;j++;
            }
               
            else{
                if(dp[i+1][j] < dp[i][j+1]){
                    ans = ans+str1[i];
                    i++;
                }
                else{
                    ans+= str2[j];
                    j++;
                }
            }
        }
        
       
        while(i<m){
            ans+=str1[i];
            i++;
        }
        
        while(j<n){
            ans+=str2[j];
            j++;
        }
        
        return ans;
    }
};
